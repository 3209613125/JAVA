在学习集合代码时发现在Iterable接口中使用了default关键字。

default关键字介绍
default是在java8中引入的关键字，也可称为Virtual 
extension methods——虚拟扩展方法。是指，在接口内部包含了一些默认的方法实现（也就是接口中可以包含方法体，这打破了Java之前版本对接口的语法限制），从而使得接口在进行扩展的时候，不会破坏与接口相关的实现类代码。

为什么要有这个特性？
首先，之前的接口是个双刃剑，好处是面向抽象而不是面向具体编程，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的java8之前的集合框架没有foreach方法，通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。他们的目的是为了解决接口的修改与现有的实现不兼容的问题。

如何使用default关键字?
1、调用父接口实现
创建接口Interface1,并且在接口Interface1中定义默认方法helloWorld()。

public interface Interface1{
    default void helloWorld() {
        System.out.println("hi i'm from Interface1");
    }
}
1
2
3
4
5
这时可以编写一个类实现接口Interface1,并调用接口中定义的默认方法helloWorld()，代码如下

/**
 * 实现接口Interface1
 */
public class MyImplement implements Interface1{
    public static void main(String[] args) {
        MyImplement myImplement = new MyImplement();
        //直接调用helloWorld()方法
        myImplement.helloWorld();
    }
}





同时继承两个接口
创建接口Interface2,接口Interface2中也定义了默认方法helloWorld()。

public interface Interface2{
    default void helloWorld() {
        System.out.println("hi i'm from Interface2");
    }
}
1
2
3
4
5
这时候让类MyImplement同时实现Interface1和Interface2，代码如下：

/**
 * 实现接口Interface1,Interface2
 */
public class MyImplement implements Interface1,Interface2{
    public static void main(String[] args) {
        MyImplement myImplement = new MyImplement();
        //直接调用helloWorld()方法
        myImplement.helloWorld();
    }
}



发生这种情况的原因是，实现类MyImplement即实现了接口Interface1又实现了接口Interface2，恰巧两个接口中都定义可相同的默认方法。说白了就是编译器此时已经被干懵了，当我们在MyImplement类中调用方法时，它不知道该去调用Interface1的默认方法还是去调用Interface2的方法。解决方法就是在实现类中实现该方法。代码如下

public class MyImplement implements Interface1,Interface2 {

    @Override
    public void helloWorld() {
        System.out.println("hi i'm from MyImplement");
    }

    public static void main(String[] args) {
        MyImplement myImplement = new MyImplement();
        myImplement.helloWorld();
    }
}





执行代码控制台输出如下： 


此时的类图为 




3、类优先于接口
此时创建一个实现类MyImplement2，该实现类不仅继承了MyImplement1并且实现了Interface2。 
实现类MyImplement2的代码如下

public class MyImplement2 extends MyImplement implements Interface2{

    public static void main(String[] args) {
        MyImplement2 myImplement2 = new MyImplement2();
        myImplement2.helloWorld();
    }

}



此时在实现类MyImplement2中调用helloWorld()方法，到底执行的是MyImplement中的方法还是执行Interface2中的方法？ 
答:因为类优先于接口，所以将会执行MyImplement中的方法。

执行结果如下 
