说深入点吧，java类加载顺序，首先加载类，执行static变量初始化，接下来执行对象的创建，如果我们要执行代码中的变量int a 初始化，那么必须先执行加载外部类，
再加载内部类，最后初始化静态变量 a ,问题就出在加载内部类上面，我们可以把内部类看成外部类的非静态成员，它的初始化必须在外部类对象创建后以后进行，
要加载内部类必须在实例化外部类之后完成 ，java虚拟机要求所有的静态变量必须在对象创建之前完成，这样便产生了矛盾。
(有点绕，呵呵)
而java常量放在内存中常量池，它的机制与变量是不同的，编译时，加载常量是不需要加载类的，所以就没有上面那种矛盾。
其实常量使用是很随意的，内部类，静态内部类，匿名内部类就乱了。
但了解JVM特性你就知道有些地方为什么不让你这么用了

定义一个静态的域或者方法，要求在静态环境或者顶层环境
这里静态环境具体说，你的例子里如果加上 static class A就ok
非静态内部类 依赖于一个外部类对象，而静态域/方法是不依赖与对象——仅与类相关
（细说了，就是加载静态域时，根本没有外部类对象）
因此，非静态内部类中不能定义静态域/方法，编译过不了
而常量之所以可以（不论有无static），因为java在编译期就确定所有常量，放到所谓的常量池当中。常量的机制和普通变量不一样
