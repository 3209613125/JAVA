请解释ArrayList与LinkedList区别
1. 观察ArrayList源码，可以发现ArrayList里面存放的是一个数组，
 如果实例化此类对象时传入了数组大 小，则里面保存的数组就会开辟一个定长的数组
 ，但是后面再进行数据保存的时候发现数组个数不够了 会进行数组动态扩充。
 所以在实际开发之中，使用ArrayList最好的做法就是设置初始化大小。
 2. LinkedList：是一个纯粹的链表实现，与之前编写的链表程序实现基本一样（人家性能高）。
 总结：ArrayList封装的是数组；LinkedList封装的是链表。ArrayList时间复杂度为1，而LinkedList的复杂度为 n。


Set接口与List接口最大的不同在于Set接口中的内容是不允许重复的。
 同时需要注意的是，Set接口并没有对 Collection接口进行扩充，
 而List对Collection进行了扩充。因此，在Set接口中没有get()方法。
 在Set子接口中有两个常用子类：HashSet(无序存储)、TreeSet(有序存储)




Set接口与List接口最大的不同在于Set接口中的内容是不允许重复的。同时需要注意的是，
 Set接口并没有对 Collection接口进行扩充，而List对Collection进行了扩充。
 因此，在Set接口中没有get()方法。 在Set子接口中有两个常用子类：HashSet(无序存储)、TreeSet(有序存储)


如果要想标识出对象的唯一性，一定需要equals()与hashCode()方法共同调用。
 面试题：如果两个对象的hashCode()相同，equals()不同结果是什么？不能消除
面试题：如果两个对象的hashCode()不同，equals()相同结果是什么？不能消除
 对象判断必须两个方法equals()、hashCode()返回值都相同才判断为相同。
个人建议：
1. 保存自定义对象的时候使用List接口； 2. 保存系统类信息的时候使用Set接口(避免重复)。


总结：HashSet和TreeSet类都继承Set接口，他们不能用来存放相同同元素（当元素为字符串，整型等等），他们也可以
用来存放对象，但是当他们用来存放对象的时候，当对象相同的时候默认不会消除，这个时候，如果是HashSet，
则通过覆写hashcode（）和equals（）方法来消除相同元素，如果是TreeSet，由于其本身实现了comparable接口，
会有compareTo方法（insert+Alt生成），则也可以消除相同的元素，否则默认不会识别相同的对象
