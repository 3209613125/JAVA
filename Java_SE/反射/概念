反射：

class：当jvm加载类时产生类的class对象，全局唯一

取得class对象：
1.调用任意对象.getClass（）
2.类名称.Class
3.Class.forname(String className)

newInstance();

Constructor:描述类的构造方法
getConstructors:取得类中的public构造方法
getDeclaredConstructors：去的类中全部构造方法



Class:

public T newInstance()

无参构造public,不能是私有否则报错，只能调用无参构造，由public提供



Construction:
public T newInstance(Object...initargs)

getConstruction，只能调用public，Construction类提供
getdeclaredConstruction,可以调用所有权限，Construction类提供



---------------------------------------

Method：描述类的普通方法，
getMethods():取得本类以及父类中所有public方法

getDeclaredMethods():只找本类所有普通方法

Method类中提供调用类中普通方法的API
public Object invoke(Object obj,Object...args):

取得类中指定名称的普通方法：
public Method getMethod(String name,Class<?>...parameterTypes)
public Method getDeclaredMethod(String name,Class<?>...parameterTypes)


Field:描述类的普通属性


类加载器双亲委派模型

定义：jdk内置的三种类加载器与用户自定义的类加载器之间得层次关系称为类加载器的双亲委派模型
要求除了顶层的父类加载器之外，其余的加载器都应该有自己的父类加载器

执行流程：
如果一个类加载器收到了类加载请求，他首先不会尝试自己去加载此类，而是把类加载请求委托给父类加载器完成，每一个称此类加载器均是如此。

只有当父类加载器无法完成加载请求时（在自己搜索范围内没有找到此类），梓加载器才会尝试自己去加载。

双亲委派模型保证了Java程序稳定运行。java中基础类库一定由顶层BootStrap类加载器加载，因此，诸如Object等核心类在各种类加载器环境下都是一个类

JDK内置的三大类加载器：

Bootstrap（启动类加载器）：
1.使用c++实现，是jvm的一部分，其余所有类加载器均有java实现
2.负责将存放于Java_Home\lib目录下的能被jvm识别的类库（rt.jar-存放了java所有的类基础库，java.lang,java.util）加载到jvm中
3.启动类加载器无法被java程序直接引用

ExtClassloader（扩展类加载器）：
1.使用java实现，并且可以被java程序直接引用
2.加载java_Home\lib\ext目录下能被识别的类库.

AppClassLoader（应用程序类加载器）：
1.负责加载用户路径（classpath）上指定的类库
2.如果应用程序中没有自定义类加载器，则此类加载器就是java程序中默认的类加载器.

